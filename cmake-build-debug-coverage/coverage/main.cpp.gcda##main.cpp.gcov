        -:    0:Source:E:/BubbleMAC_INFOCOM/main.cpp
        -:    0:Graph:E:\BubbleMAC_INFOCOM\cmake-build-debug-coverage\CMakeFiles\BubbleMAC_INFOCOM.dir\main.cpp.gcno
        -:    0:Data:E:\BubbleMAC_INFOCOM\cmake-build-debug-coverage\CMakeFiles\BubbleMAC_INFOCOM.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include "vehicle.h"
        -:    3:#include "parameters.h"
        -:    4:#include "common.h"
        -:    5:#include "UpLocation.h"
        -:    6:#include "communication.h"
        -:    7:#include "BubbleProtocol.h"
        -:    8:#include "Protocol_80211.h"
        -:    9:#include "Protocol_VeMAC.h"
        -:   10:
        -:   11:using namespace std;
        -:   12:
        -:   13:
        -:   14:#define p_Bubble 0
        -:   15:#define p_80211 1
        -:   16:#define p_VeMAC 2
        -:   17:
function main called 1 returned 100% blocks executed 67%
        1:   18:int main(int argc, char *argv[]) {
        1:   19:    cout<<"hello world"<<endl;
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:   20:
        1:   21:    string trace_path;
        1:   21-block  0
call    0 returned 1
        1:   22:    int protocol = argv[2][0] - '0'; //0: bubble 1:802.11 2:veMAC
        -:   23:
        1:   24:    trace_path = argv[1];       //读取文件路径
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25:    cout<< "Current trace file is from:"<< trace_path<<"..."<<endl;
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   25-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   25-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        -:   26:
        1:   27:    switch (protocol) {
        1:   27-block  0
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
        1:   28:        case 0:
        1:   29:            cout<<"Current Protocol is Bubble MAC..."<<endl;
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   30:            break;
        1:   30-block  0
    #####:   31:        case 1:
    #####:   32:            cout<<"Current Protocol is 802.11p MAC..."<<endl;
    %%%%%:   32-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   32-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   33:            break;
    %%%%%:   33-block  0
    #####:   34:        case 2:
    #####:   35:            cout<<"Current Protocol is VeMAC..."<<endl;
    %%%%%:   35-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   35-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   36:            break;
    %%%%%:   36-block  0
    #####:   37:        default:
    #####:   38:            cout<<"error! Please input a right MAC protocol"<<endl;
    %%%%%:   38-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   38-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   39:    }
        -:   40:
        -:   41:
        1:   42:    srand(0);
        1:   42-block  0
call    0 returned 1
        -:   43:
        1:   44:    int slot_start = 0;
        1:   45:    int slot_end = 14000;
        1:   46:    int slot_step = 1;
        -:   47:
        -:   48:    struct Duallist ALL_Vehicles;
        1:   49:    duallist_init(&ALL_Vehicles);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   50:
        -:   51:
    14001:   52:    for(int slot = slot_start; slot < slot_end; slot += slot_step){
        1:   52-block  0
    14000:   52-block  1
    14001:   52-block  2
branch  0 taken 14000
branch  1 taken 1 (fallthrough)
        -:   53:        //cout<<"slot = "<< slot<<endl;
        -:   54:
    14000:   55:        if(slot % UpLocSlot == 0){
    14000:   55-block  0
branch  0 taken 2800 (fallthrough)
branch  1 taken 11200
     2800:   56:            init_simulation(&ALL_Vehicles);
     2800:   56-block  0
call    0 returned 2800
branch  1 taken 2800 (fallthrough)
branch  2 taken 0 (throw)
     2800:   57:            updateLocation(&ALL_Vehicles, slot, trace_path);
     2800:   57-block  0
call    0 returned 2800
branch  1 taken 2800 (fallthrough)
branch  2 taken 0 (throw)
     2800:   57-block  1
call    3 returned 2800
branch  4 taken 2800 (fallthrough)
branch  5 taken 0 (throw)
     2800:   57-block  2
call    6 returned 2800
    $$$$$:   57-block  3
call    7 never executed
    $$$$$:   57-block  4
     2800:   58:            handle_neighbours(&ALL_Vehicles);
call    0 returned 2800
branch  1 taken 2800 (fallthrough)
branch  2 taken 0 (throw)
        -:   59:            //cout<<"The location of vehicles has been updated, Current slot = "<<slot<<endl;
        -:   60:            //printVehilces(&ALL_Vehicles);
        -:   61:        }
        -:   62:
        -:   63:
    14000:   64:        if(slot % SlotPerFrame ==0){
    14000:   64-block  0
branch  0 taken 70 (fallthrough)
branch  1 taken 13930
       70:   65:            switch (protocol){
       70:   65-block  0
branch  0 taken 70
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
       70:   66:                case p_Bubble:
       70:   67:                    bubble_handle_packets(&ALL_Vehicles, slot);
       70:   67-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
       70:   68:                    bubble_protocol_commRange(&ALL_Vehicles, slot);
       70:   68-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
        -:   69:                    //cout<<"after commRange deter-----------------------"<<endl;
        -:   70:                    //printVehilces(&ALL_Vehicles);
       70:   71:                    bubble_protocol_slot(&ALL_Vehicles, slot);
       70:   71-block  0
call    0 returned 70
branch  1 taken 70 (fallthrough)
branch  2 taken 0 (throw)
        -:   72:                    //cout<<"after slot deter------------------------"<<endl;
        -:   73:                    //printVehilces(&ALL_Vehicles);
       70:   74:                    break;
       70:   74-block  0
    #####:   75:                case p_80211:
    #####:   76:                    mac_80211p(&ALL_Vehicles, slot);
    %%%%%:   76-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   77:                    //printVehilces(&ALL_Vehicles);
    #####:   78:                    break;
    %%%%%:   78-block  0
    #####:   79:                case p_VeMAC:
    #####:   80:                    ve_mac(&ALL_Vehicles, slot);
    %%%%%:   80-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   81:                    //printVehilces(&ALL_Vehicles);
    #####:   82:                    break;
    %%%%%:   82-block  0
    #####:   83:                default:break;
    %%%%%:   83-block  0
        -:   84:            }
        -:   85:        }
        -:   86://        //--------MAC Protocol-----------//
        -:   87://         //802.11p
        -:   88://         if(slot % SlotPerFrame == 0){
        -:   89://             mac_80211p(&ALL_Vehicles, slot);
        -:   90://             printVehilces(&ALL_Vehicles);
        -:   91://         }
        -:   92://
        -:   93://        //VeMAC
        -:   94://        if(slot % SlotPerFrame == 0){
        -:   95://            ve_mac(&ALL_Vehicles, slot);
        -:   96://            printVehilces(&ALL_Vehicles);
        -:   97://        }
        -:   98://
        -:   99://        //Bubble MAC, determine the communication range and slot
        -:  100://        if(slot % SlotPerFrame == 0){
        -:  101://            bubble_handle_packets(&ALL_Vehicles, slot);
        -:  102://            bubble_protocol_commRange(&ALL_Vehicles, slot);
        -:  103://            cout<<"after commRange deter-----------------------"<<endl;
        -:  104://            printVehilces(&ALL_Vehicles);
        -:  105://            bubble_protocol_slot(&ALL_Vehicles, slot);
        -:  106://            cout<<"after slot deter------------------------"<<endl;
        -:  107://            printVehilces(&ALL_Vehicles);
        -:  108://        }
        -:  109:
        -:  110:
        -:  111:        //handle the transmitter at each slot
    14000:  112:        handle_transmitter(&ALL_Vehicles, slot);
    14000:  112-block  0
call    0 returned 14000
branch  1 taken 14000 (fallthrough)
branch  2 taken 0 (throw)
        -:  113:        //handle the receiver at each slot
    14000:  114:        handle_receiver(&ALL_Vehicles, slot);
    14000:  114-block  0
call    0 returned 14000
branch  1 taken 14000 (fallthrough)
branch  2 taken 0 (throw)
        -:  115:    }
        1:  116:    printf("Total Cars: %d\n cnt_pkt_tx: %d\n cnt_pkt_0: %d\n cnt_pkt_1: %d\n cnt_pkt_2: %d\n", Car_Number, cnt_pkt_tx, cnt_pkt_0, cnt_pkt_1, cnt_pkt_2);
        1:  116-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  117:    return 0;
        1:  118:}
        1:  118-block  0
call    0 returned 1
    $$$$$:  118-block  1
call    1 never executed
